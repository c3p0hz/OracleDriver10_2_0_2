package oracle.jdbc.driver;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Date;
import java.sql.NClob;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLXML;
import java.sql.Statement;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Map;
import oracle.sql.ARRAY;
import oracle.sql.BFILE;
import oracle.sql.BLOB;
import oracle.sql.CHAR;
import oracle.sql.CLOB;
import oracle.sql.CustomDatum;
import oracle.sql.CustomDatumFactory;
import oracle.sql.DATE;
import oracle.sql.Datum;
import oracle.sql.INTERVALDS;
import oracle.sql.INTERVALYM;
import oracle.sql.NUMBER;
import oracle.sql.OPAQUE;
import oracle.sql.ORAData;
import oracle.sql.ORADataFactory;
import oracle.sql.RAW;
import oracle.sql.REF;
import oracle.sql.ROWID;
import oracle.sql.STRUCT;
import oracle.sql.TIMESTAMP;
import oracle.sql.TIMESTAMPLTZ;

class OracleReturnResultSet extends BaseResultSet {
	OracleStatement statement;
	boolean closed;
	Accessor[] returnAccessors;

	OracleReturnResultSet(OracleStatement paramOracleStatement) throws SQLException {
		/* 36 */this.statement = paramOracleStatement;
		/* 37 */this.closed = false;

		/* 39 */this.returnAccessors = new Accessor[paramOracleStatement.numReturnParams];

		/* 41 */int i = 0;
		/* 42 */for (int j = 0; j < paramOracleStatement.numberOfBindPositions; j++) {
			/* 44 */Accessor localAccessor = paramOracleStatement.returnParamAccessors[j];

			/* 46 */if (localAccessor != null)
				/* 47 */this.returnAccessors[(i++)] = localAccessor;
		}
	}

	public synchronized boolean next() throws SQLException {
		/* 57 */if (this.closed)
			return false;

		/* 59 */if (!this.statement.returnParamsFetched) {
			/* 61 */this.statement.fetchDmlReturnParams();
			/* 62 */this.statement.setupReturnParamAccessors();
		}

		/* 65 */this.statement.currentRow += 1;
		/* 66 */this.statement.totalRowsVisited += 1;

		/* 69 */return this.statement.currentRow < this.statement.rowsDmlReturned;
	}

	public synchronized void close() throws SQLException {
		/* 80 */this.closed = true;

		/* 82 */this.statement.returnResultSet = null;
		/* 83 */this.statement.numReturnParams = 0;
		/* 84 */this.statement.totalRowsVisited = 0;
		/* 85 */this.statement.currentRow = -1;
		/* 86 */this.statement.returnParamsFetched = false;
		/* 87 */this.statement.rowsDmlReturned = 0;
		/* 88 */this.statement.returnParamBytes = null;
		/* 89 */this.statement.returnParamChars = null;
		/* 90 */this.statement.returnParamIndicators = null;
	}

	public synchronized boolean wasNull() throws SQLException {
		/* 99 */if (this.closed) {
			/* 100 */DatabaseError.throwSqlException(11);
		}
		/* 102 */if ((this.statement.currentRow == -1) || (this.statement.lastIndex == 0)) {
			/* 103 */DatabaseError.throwSqlException(24);
		}
		/* 105 */return this.returnAccessors[(this.statement.lastIndex - 1)].isNull(this.statement.currentRow);
	}

	public synchronized ResultSetMetaData getMetaData() throws SQLException {
		/* 115 */if (!this.statement.isAutoGeneratedKey) {
			/* 116 */DatabaseError.throwSqlException(23);
		}
		/* 118 */if (this.closed) {
			/* 119 */DatabaseError.throwSqlException(10);
		}
		/* 121 */if (this.statement.closed) {
			/* 122 */DatabaseError.throwSqlException(9);
		}
		/* 124 */AutoKeyInfo localAutoKeyInfo = this.statement.autoKeyInfo;
		/* 125 */localAutoKeyInfo.statement = this.statement;
		/* 126 */localAutoKeyInfo.connection = this.statement.connection;
		/* 127 */localAutoKeyInfo.initMetaData(this);
		/* 128 */return localAutoKeyInfo;
	}

	public synchronized Statement getStatement() throws SQLException {
		/* 136 */return this.statement;
	}

	public synchronized String getString(int paramInt) throws SQLException {
		/* 150 */if (this.closed) {
			/* 151 */DatabaseError.throwSqlException(11);
		}
		/* 153 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 154 */DatabaseError.throwSqlException(3);
		}
		/* 156 */int i = this.statement.currentRow;
		/* 157 */if (i < 0) {
			/* 158 */DatabaseError.throwSqlException(14);
		}

		/* 161 */this.statement.lastIndex = paramInt;

		/* 164 */return this.returnAccessors[(paramInt - 1)].getString(i);
	}

	public synchronized boolean getBoolean(int paramInt) throws SQLException {
		/* 175 */if (this.closed) {
			/* 176 */DatabaseError.throwSqlException(11);
		}
		/* 178 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 179 */DatabaseError.throwSqlException(3);
		}
		/* 181 */int i = this.statement.currentRow;
		/* 182 */if (i < 0) {
			/* 183 */DatabaseError.throwSqlException(14);
		}

		/* 186 */this.statement.lastIndex = paramInt;

		/* 189 */return this.returnAccessors[(paramInt - 1)].getBoolean(i);
	}

	public synchronized byte getByte(int paramInt) throws SQLException {
		/* 200 */if (this.closed) {
			/* 201 */DatabaseError.throwSqlException(11);
		}
		/* 203 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 204 */DatabaseError.throwSqlException(3);
		}
		/* 206 */int i = this.statement.currentRow;
		/* 207 */if (i < 0) {
			/* 208 */DatabaseError.throwSqlException(14);
		}

		/* 211 */this.statement.lastIndex = paramInt;

		/* 214 */return this.returnAccessors[(paramInt - 1)].getByte(i);
	}

	public synchronized short getShort(int paramInt) throws SQLException {
		/* 225 */if (this.closed) {
			/* 226 */DatabaseError.throwSqlException(11);
		}
		/* 228 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 229 */DatabaseError.throwSqlException(3);
		}
		/* 231 */int i = this.statement.currentRow;
		/* 232 */if (i < 0) {
			/* 233 */DatabaseError.throwSqlException(14);
		}

		/* 236 */this.statement.lastIndex = paramInt;

		/* 239 */return this.returnAccessors[(paramInt - 1)].getShort(i);
	}

	public synchronized int getInt(int paramInt) throws SQLException {
		/* 251 */if (this.closed) {
			/* 252 */DatabaseError.throwSqlException(11);
		}
		/* 254 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 255 */DatabaseError.throwSqlException(3);
		}
		/* 257 */int i = this.statement.currentRow;
		/* 258 */if (i < 0) {
			/* 259 */DatabaseError.throwSqlException(14);
		}

		/* 262 */this.statement.lastIndex = paramInt;

		/* 265 */return this.returnAccessors[(paramInt - 1)].getInt(i);
	}

	public synchronized long getLong(int paramInt) throws SQLException {
		/* 276 */if (this.closed) {
			/* 277 */DatabaseError.throwSqlException(11);
		}
		/* 279 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 280 */DatabaseError.throwSqlException(3);
		}
		/* 282 */int i = this.statement.currentRow;
		/* 283 */if (i < 0) {
			/* 284 */DatabaseError.throwSqlException(14);
		}

		/* 287 */this.statement.lastIndex = paramInt;

		/* 290 */return this.returnAccessors[(paramInt - 1)].getLong(i);
	}

	public synchronized float getFloat(int paramInt) throws SQLException {
		/* 301 */if (this.closed) {
			/* 302 */DatabaseError.throwSqlException(11);
		}
		/* 304 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 305 */DatabaseError.throwSqlException(3);
		}
		/* 307 */int i = this.statement.currentRow;
		/* 308 */if (i < 0) {
			/* 309 */DatabaseError.throwSqlException(14);
		}

		/* 312 */this.statement.lastIndex = paramInt;

		/* 315 */return this.returnAccessors[(paramInt - 1)].getFloat(i);
	}

	public synchronized double getDouble(int paramInt) throws SQLException {
		/* 326 */if (this.closed) {
			/* 327 */DatabaseError.throwSqlException(11);
		}
		/* 329 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 330 */DatabaseError.throwSqlException(3);
		}
		/* 332 */int i = this.statement.currentRow;
		/* 333 */if (i < 0) {
			/* 334 */DatabaseError.throwSqlException(14);
		}

		/* 337 */this.statement.lastIndex = paramInt;

		/* 340 */return this.returnAccessors[(paramInt - 1)].getDouble(i);
	}

	public synchronized BigDecimal getBigDecimal(int paramInt1, int paramInt2) throws SQLException {
		/* 351 */if (this.closed) {
			/* 352 */DatabaseError.throwSqlException(11);
		}
		/* 354 */if ((paramInt1 <= 0) || (paramInt1 > this.statement.numReturnParams)) {
			/* 355 */DatabaseError.throwSqlException(3);
		}
		/* 357 */int i = this.statement.currentRow;
		/* 358 */if (i < 0) {
			/* 359 */DatabaseError.throwSqlException(14);
		}

		/* 362 */this.statement.lastIndex = paramInt1;

		/* 365 */return this.returnAccessors[(paramInt1 - 1)].getBigDecimal(i, paramInt2);
	}

	public synchronized byte[] getBytes(int paramInt) throws SQLException {
		/* 376 */if (this.closed) {
			/* 377 */DatabaseError.throwSqlException(11);
		}
		/* 379 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 380 */DatabaseError.throwSqlException(3);
		}
		/* 382 */int i = this.statement.currentRow;
		/* 383 */if (i < 0) {
			/* 384 */DatabaseError.throwSqlException(14);
		}

		/* 387 */this.statement.lastIndex = paramInt;

		/* 390 */return this.returnAccessors[(paramInt - 1)].getBytes(i);
	}

	public synchronized Date getDate(int paramInt) throws SQLException {
		/* 401 */if (this.closed) {
			/* 402 */DatabaseError.throwSqlException(11);
		}
		/* 404 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 405 */DatabaseError.throwSqlException(3);
		}
		/* 407 */int i = this.statement.currentRow;
		/* 408 */if (i < 0) {
			/* 409 */DatabaseError.throwSqlException(14);
		}

		/* 412 */this.statement.lastIndex = paramInt;

		/* 415 */return this.returnAccessors[(paramInt - 1)].getDate(i);
	}

	public synchronized Time getTime(int paramInt) throws SQLException {
		/* 426 */if (this.closed) {
			/* 427 */DatabaseError.throwSqlException(11);
		}
		/* 429 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 430 */DatabaseError.throwSqlException(3);
		}
		/* 432 */int i = this.statement.currentRow;
		/* 433 */if (i < 0) {
			/* 434 */DatabaseError.throwSqlException(14);
		}

		/* 437 */this.statement.lastIndex = paramInt;

		/* 440 */return this.returnAccessors[(paramInt - 1)].getTime(i);
	}

	public synchronized Timestamp getTimestamp(int paramInt) throws SQLException {
		/* 451 */if (this.closed) {
			/* 452 */DatabaseError.throwSqlException(11);
		}
		/* 454 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 455 */DatabaseError.throwSqlException(3);
		}
		/* 457 */int i = this.statement.currentRow;
		/* 458 */if (i < 0) {
			/* 459 */DatabaseError.throwSqlException(14);
		}

		/* 462 */this.statement.lastIndex = paramInt;

		/* 465 */return this.returnAccessors[(paramInt - 1)].getTimestamp(i);
	}

	public synchronized InputStream getAsciiStream(int paramInt) throws SQLException {
		/* 475 */DatabaseError.throwSqlException(23);
		/* 476 */return null;
	}

	public synchronized InputStream getUnicodeStream(int paramInt) throws SQLException {
		/* 488 */DatabaseError.throwSqlException(23);
		/* 489 */return null;
	}

	public synchronized InputStream getBinaryStream(int paramInt) throws SQLException {
		/* 501 */DatabaseError.throwSqlException(23);
		/* 502 */return null;
	}

	public synchronized Object getObject(int paramInt) throws SQLException {
		/* 515 */if (this.closed) {
			/* 516 */DatabaseError.throwSqlException(11);
		}
		/* 518 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 519 */DatabaseError.throwSqlException(3);
		}
		/* 521 */int i = this.statement.currentRow;
		/* 522 */if (i < 0) {
			/* 523 */DatabaseError.throwSqlException(14);
		}

		/* 526 */this.statement.lastIndex = paramInt;

		/* 529 */return this.returnAccessors[(paramInt - 1)].getObject(i);
	}

	public synchronized ResultSet getCursor(int paramInt) throws SQLException {
		/* 540 */DatabaseError.throwSqlException(23);
		/* 541 */return null;
	}

	public synchronized Datum getOracleObject(int paramInt) throws SQLException {
		/* 555 */if (this.closed) {
			/* 556 */DatabaseError.throwSqlException(11);
		}
		/* 558 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 559 */DatabaseError.throwSqlException(3);
		}
		/* 561 */int i = this.statement.currentRow;
		/* 562 */if (i < 0) {
			/* 563 */DatabaseError.throwSqlException(14);
		}

		/* 566 */this.statement.lastIndex = paramInt;

		/* 569 */return this.returnAccessors[(paramInt - 1)].getOracleObject(i);
	}

	public synchronized ROWID getROWID(int paramInt) throws SQLException {
		/* 581 */if (this.closed) {
			/* 582 */DatabaseError.throwSqlException(11);
		}
		/* 584 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 585 */DatabaseError.throwSqlException(3);
		}
		/* 587 */int i = this.statement.currentRow;
		/* 588 */if (i < 0) {
			/* 589 */DatabaseError.throwSqlException(14);
		}

		/* 592 */this.statement.lastIndex = paramInt;

		/* 595 */return this.returnAccessors[(paramInt - 1)].getROWID(i);
	}

	public synchronized NUMBER getNUMBER(int paramInt) throws SQLException {
		/* 607 */if (this.closed) {
			/* 608 */DatabaseError.throwSqlException(11);
		}
		/* 610 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 611 */DatabaseError.throwSqlException(3);
		}
		/* 613 */int i = this.statement.currentRow;
		/* 614 */if (i < 0) {
			/* 615 */DatabaseError.throwSqlException(14);
		}

		/* 618 */this.statement.lastIndex = paramInt;

		/* 621 */return this.returnAccessors[(paramInt - 1)].getNUMBER(i);
	}

	public synchronized DATE getDATE(int paramInt) throws SQLException {
		/* 633 */if (this.closed) {
			/* 634 */DatabaseError.throwSqlException(11);
		}
		/* 636 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 637 */DatabaseError.throwSqlException(3);
		}
		/* 639 */int i = this.statement.currentRow;
		/* 640 */if (i < 0) {
			/* 641 */DatabaseError.throwSqlException(14);
		}

		/* 644 */this.statement.lastIndex = paramInt;

		/* 647 */return this.returnAccessors[(paramInt - 1)].getDATE(i);
	}

	public synchronized ARRAY getARRAY(int paramInt) throws SQLException {
		/* 659 */if (this.closed) {
			/* 660 */DatabaseError.throwSqlException(11);
		}
		/* 662 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 663 */DatabaseError.throwSqlException(3);
		}
		/* 665 */int i = this.statement.currentRow;
		/* 666 */if (i < 0) {
			/* 667 */DatabaseError.throwSqlException(14);
		}

		/* 670 */this.statement.lastIndex = paramInt;

		/* 673 */return this.returnAccessors[(paramInt - 1)].getARRAY(i);
	}

	public synchronized STRUCT getSTRUCT(int paramInt) throws SQLException {
		/* 685 */if (this.closed) {
			/* 686 */DatabaseError.throwSqlException(11);
		}
		/* 688 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 689 */DatabaseError.throwSqlException(3);
		}
		/* 691 */int i = this.statement.currentRow;
		/* 692 */if (i < 0) {
			/* 693 */DatabaseError.throwSqlException(14);
		}

		/* 696 */this.statement.lastIndex = paramInt;

		/* 699 */return this.returnAccessors[(paramInt - 1)].getSTRUCT(i);
	}

	public synchronized OPAQUE getOPAQUE(int paramInt) throws SQLException {
		/* 710 */DatabaseError.throwSqlException(23);
		/* 711 */return null;
	}

	public synchronized REF getREF(int paramInt) throws SQLException {
		/* 725 */if (this.closed) {
			/* 726 */DatabaseError.throwSqlException(11);
		}
		/* 728 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 729 */DatabaseError.throwSqlException(3);
		}
		/* 731 */int i = this.statement.currentRow;
		/* 732 */if (i < 0) {
			/* 733 */DatabaseError.throwSqlException(14);
		}

		/* 736 */this.statement.lastIndex = paramInt;

		/* 739 */return this.returnAccessors[(paramInt - 1)].getREF(i);
	}

	public synchronized CHAR getCHAR(int paramInt) throws SQLException {
		/* 751 */if (this.closed) {
			/* 752 */DatabaseError.throwSqlException(11);
		}
		/* 754 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 755 */DatabaseError.throwSqlException(3);
		}
		/* 757 */int i = this.statement.currentRow;
		/* 758 */if (i < 0) {
			/* 759 */DatabaseError.throwSqlException(14);
		}

		/* 762 */this.statement.lastIndex = paramInt;

		/* 765 */return this.returnAccessors[(paramInt - 1)].getCHAR(i);
	}

	public synchronized RAW getRAW(int paramInt) throws SQLException {
		/* 777 */if (this.closed) {
			/* 778 */DatabaseError.throwSqlException(11);
		}
		/* 780 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 781 */DatabaseError.throwSqlException(3);
		}
		/* 783 */int i = this.statement.currentRow;
		/* 784 */if (i < 0) {
			/* 785 */DatabaseError.throwSqlException(14);
		}

		/* 788 */this.statement.lastIndex = paramInt;

		/* 791 */return this.returnAccessors[(paramInt - 1)].getRAW(i);
	}

	public synchronized BLOB getBLOB(int paramInt) throws SQLException {
		/* 803 */if (this.closed) {
			/* 804 */DatabaseError.throwSqlException(11);
		}
		/* 806 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 807 */DatabaseError.throwSqlException(3);
		}
		/* 809 */int i = this.statement.currentRow;
		/* 810 */if (i < 0) {
			/* 811 */DatabaseError.throwSqlException(14);
		}

		/* 814 */this.statement.lastIndex = paramInt;

		/* 817 */return this.returnAccessors[(paramInt - 1)].getBLOB(i);
	}

	public synchronized CLOB getCLOB(int paramInt) throws SQLException {
		/* 829 */if (this.closed) {
			/* 830 */DatabaseError.throwSqlException(11);
		}
		/* 832 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 833 */DatabaseError.throwSqlException(3);
		}
		/* 835 */int i = this.statement.currentRow;
		/* 836 */if (i < 0) {
			/* 837 */DatabaseError.throwSqlException(14);
		}

		/* 840 */this.statement.lastIndex = paramInt;

		/* 843 */return this.returnAccessors[(paramInt - 1)].getCLOB(i);
	}

	public synchronized BFILE getBFILE(int paramInt) throws SQLException {
		/* 854 */if (this.closed) {
			/* 855 */DatabaseError.throwSqlException(11);
		}
		/* 857 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 858 */DatabaseError.throwSqlException(3);
		}
		/* 860 */int i = this.statement.currentRow;
		/* 861 */if (i < 0) {
			/* 862 */DatabaseError.throwSqlException(14);
		}

		/* 865 */this.statement.lastIndex = paramInt;

		/* 868 */return this.returnAccessors[(paramInt - 1)].getBFILE(i);
	}

	public synchronized BFILE getBfile(int paramInt) throws SQLException {
		/* 878 */return getBFILE(paramInt);
	}

	public synchronized CustomDatum getCustomDatum(int paramInt, CustomDatumFactory paramCustomDatumFactory) throws SQLException {
		/* 888 */DatabaseError.throwSqlException(23);
		/* 889 */return null;
	}

	public synchronized ORAData getORAData(int paramInt, ORADataFactory paramORADataFactory) throws SQLException {
		/* 903 */if (this.closed) {
			/* 904 */DatabaseError.throwSqlException(11);
		}
		/* 906 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 907 */DatabaseError.throwSqlException(3);
		}
		/* 909 */int i = this.statement.currentRow;
		/* 910 */if (i < 0) {
			/* 911 */DatabaseError.throwSqlException(14);
		}

		/* 914 */this.statement.lastIndex = paramInt;

		/* 917 */return this.returnAccessors[(paramInt - 1)].getORAData(i, paramORADataFactory);
	}

	public synchronized Object getObject(int paramInt, Map paramMap) throws SQLException {
		/* 929 */if (this.closed) {
			/* 930 */DatabaseError.throwSqlException(11);
		}
		/* 932 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 933 */DatabaseError.throwSqlException(3);
		}
		/* 935 */int i = this.statement.currentRow;
		/* 936 */if (i < 0) {
			/* 937 */DatabaseError.throwSqlException(14);
		}

		/* 940 */this.statement.lastIndex = paramInt;

		/* 943 */return this.returnAccessors[(paramInt - 1)].getObject(i, paramMap);
	}

	public synchronized Ref getRef(int paramInt) throws SQLException {
		/* 954 */return getREF(paramInt);
	}

	public synchronized Blob getBlob(int paramInt) throws SQLException {
		/* 964 */return getBLOB(paramInt);
	}

	public synchronized Clob getClob(int paramInt) throws SQLException {
		/* 974 */return getCLOB(paramInt);
	}

	public synchronized Array getArray(int paramInt) throws SQLException {
		/* 984 */DatabaseError.throwSqlException(23);
		/* 985 */return null;
	}

	public synchronized Reader getCharacterStream(int paramInt) throws SQLException {
		/* 998 */DatabaseError.throwSqlException(23);
		/* 999 */return null;
	}

	public BigDecimal getBigDecimal(int paramInt) throws SQLException {
		/* 1012 */if (this.closed) {
			/* 1013 */DatabaseError.throwSqlException(11);
		}
		/* 1015 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 1016 */DatabaseError.throwSqlException(3);
		}
		/* 1018 */int i = this.statement.currentRow;
		/* 1019 */if (i < 0) {
			/* 1020 */DatabaseError.throwSqlException(14);
		}

		/* 1023 */this.statement.lastIndex = paramInt;

		/* 1026 */return this.returnAccessors[(paramInt - 1)].getBigDecimal(i);
	}

	public Date getDate(int paramInt, Calendar paramCalendar) throws SQLException {
		/* 1038 */if (this.closed) {
			/* 1039 */DatabaseError.throwSqlException(11);
		}
		/* 1041 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 1042 */DatabaseError.throwSqlException(3);
		}
		/* 1044 */int i = this.statement.currentRow;
		/* 1045 */if (i < 0) {
			/* 1046 */DatabaseError.throwSqlException(14);
		}

		/* 1049 */this.statement.lastIndex = paramInt;

		/* 1052 */return this.returnAccessors[(paramInt - 1)].getDate(i, paramCalendar);
	}

	public Time getTime(int paramInt, Calendar paramCalendar) throws SQLException {
		/* 1064 */if (this.closed) {
			/* 1065 */DatabaseError.throwSqlException(11);
		}
		/* 1067 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 1068 */DatabaseError.throwSqlException(3);
		}
		/* 1070 */int i = this.statement.currentRow;
		/* 1071 */if (i < 0) {
			/* 1072 */DatabaseError.throwSqlException(14);
		}

		/* 1075 */this.statement.lastIndex = paramInt;

		/* 1078 */return this.returnAccessors[(paramInt - 1)].getTime(i, paramCalendar);
	}

	public Timestamp getTimestamp(int paramInt, Calendar paramCalendar) throws SQLException {
		/* 1090 */if (this.closed) {
			/* 1091 */DatabaseError.throwSqlException(11);
		}
		/* 1093 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 1094 */DatabaseError.throwSqlException(3);
		}
		/* 1096 */int i = this.statement.currentRow;
		/* 1097 */if (i < 0) {
			/* 1098 */DatabaseError.throwSqlException(14);
		}

		/* 1101 */this.statement.lastIndex = paramInt;

		/* 1104 */return this.returnAccessors[(paramInt - 1)].getTimestamp(i, paramCalendar);
	}

	public INTERVALYM getINTERVALYM(int paramInt) throws SQLException {
		/* 1116 */if (this.closed) {
			/* 1117 */DatabaseError.throwSqlException(11);
		}
		/* 1119 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 1120 */DatabaseError.throwSqlException(3);
		}
		/* 1122 */int i = this.statement.currentRow;
		/* 1123 */if (i < 0) {
			/* 1124 */DatabaseError.throwSqlException(14);
		}

		/* 1127 */this.statement.lastIndex = paramInt;

		/* 1130 */return this.returnAccessors[(paramInt - 1)].getINTERVALYM(i);
	}

	public INTERVALDS getINTERVALDS(int paramInt) throws SQLException {
		/* 1141 */if (this.closed) {
			/* 1142 */DatabaseError.throwSqlException(11);
		}
		/* 1144 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 1145 */DatabaseError.throwSqlException(3);
		}
		/* 1147 */int i = this.statement.currentRow;
		/* 1148 */if (i < 0) {
			/* 1149 */DatabaseError.throwSqlException(14);
		}

		/* 1152 */this.statement.lastIndex = paramInt;

		/* 1155 */return this.returnAccessors[(paramInt - 1)].getINTERVALDS(i);
	}

	public TIMESTAMP getTIMESTAMP(int paramInt) throws SQLException {
		/* 1167 */if (this.closed) {
			/* 1168 */DatabaseError.throwSqlException(11);
		}
		/* 1170 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 1171 */DatabaseError.throwSqlException(3);
		}
		/* 1173 */int i = this.statement.currentRow;
		/* 1174 */if (i < 0) {
			/* 1175 */DatabaseError.throwSqlException(14);
		}

		/* 1178 */this.statement.lastIndex = paramInt;

		/* 1181 */return this.returnAccessors[(paramInt - 1)].getTIMESTAMP(i);
	}

	public TIMESTAMPLTZ getTIMESTAMPLTZ(int paramInt) throws SQLException {
		/* 1192 */if (this.closed) {
			/* 1193 */DatabaseError.throwSqlException(11);
		}
		/* 1195 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 1196 */DatabaseError.throwSqlException(3);
		}
		/* 1198 */int i = this.statement.currentRow;
		/* 1199 */if (i < 0) {
			/* 1200 */DatabaseError.throwSqlException(14);
		}

		/* 1203 */this.statement.lastIndex = paramInt;

		/* 1206 */return this.returnAccessors[(paramInt - 1)].getTIMESTAMPLTZ(i);
	}

	public synchronized URL getURL(int paramInt) throws SQLException {
		/* 1218 */if (this.closed) {
			/* 1219 */DatabaseError.throwSqlException(11);
		}
		/* 1221 */if ((paramInt <= 0) || (paramInt > this.statement.numReturnParams)) {
			/* 1222 */DatabaseError.throwSqlException(3);
		}
		/* 1224 */int i = this.statement.currentRow;
		/* 1225 */if (i < 0) {
			/* 1226 */DatabaseError.throwSqlException(14);
		}

		/* 1229 */this.statement.lastIndex = paramInt;

		/* 1232 */return this.returnAccessors[(paramInt - 1)].getURL(i);
	}

	public boolean isBeforeFirst() throws SQLException {
		/* 1242 */return (!isEmptyResultSet()) && (this.statement.currentRow == -1) && (!this.closed);
	}

	public boolean isAfterLast() throws SQLException {
		/* 1251 */return (!isEmptyResultSet()) && (this.closed);
	}

	public boolean isFirst() throws SQLException {
		/* 1259 */return getRow() == 1;
	}

	public boolean isLast() throws SQLException {
		/* 1267 */return getRow() == this.statement.rowsDmlReturned;
	}

	public int getRow() throws SQLException {
		/* 1275 */return this.statement.totalRowsVisited;
	}

	public synchronized int findColumn(String paramString) throws SQLException {
		/* 1284 */DatabaseError.throwSqlException(23);
		/* 1285 */return -1;
	}

	public void setFetchSize(int paramInt) throws SQLException {
		/* 1296 */DatabaseError.throwSqlException(23);
	}

	public int getFetchSize() throws SQLException {
		/* 1307 */DatabaseError.throwSqlException(23);
		/* 1308 */return -1;
	}

	boolean isEmptyResultSet() {
		/* 1316 */return this.statement.rowsDmlReturned == 0;
	}


	@Override
	public RowId getRowId(int columnIndex) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public RowId getRowId(String columnLabel) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void updateRowId(int columnIndex, RowId x) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateRowId(String columnLabel, RowId x) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public int getHoldability() throws SQLException {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean isClosed() throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void updateNString(int columnIndex, String nString) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateNString(String columnLabel, String nString) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateNClob(int columnIndex, NClob nClob) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateNClob(String columnLabel, NClob nClob) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public NClob getNClob(int columnIndex) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public NClob getNClob(String columnLabel) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SQLXML getSQLXML(int columnIndex) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SQLXML getSQLXML(String columnLabel) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void updateSQLXML(int columnIndex, SQLXML xmlObject) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateSQLXML(String columnLabel, SQLXML xmlObject) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public String getNString(int columnIndex) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getNString(String columnLabel) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Reader getNCharacterStream(int columnIndex) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Reader getNCharacterStream(String columnLabel) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void updateNCharacterStream(int columnIndex, Reader x, long length) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateNCharacterStream(String columnLabel, Reader reader, long length) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateAsciiStream(int columnIndex, InputStream x, long length) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateBinaryStream(int columnIndex, InputStream x, long length) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateCharacterStream(int columnIndex, Reader x, long length) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateAsciiStream(String columnLabel, InputStream x, long length) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateBinaryStream(String columnLabel, InputStream x, long length) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateCharacterStream(String columnLabel, Reader reader, long length) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateBlob(int columnIndex, InputStream inputStream, long length) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateBlob(String columnLabel, InputStream inputStream, long length) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateClob(int columnIndex, Reader reader, long length) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateClob(String columnLabel, Reader reader, long length) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateNClob(int columnIndex, Reader reader, long length) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateNClob(String columnLabel, Reader reader, long length) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateNCharacterStream(int columnIndex, Reader x) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateNCharacterStream(String columnLabel, Reader reader) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateAsciiStream(int columnIndex, InputStream x) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateBinaryStream(int columnIndex, InputStream x) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateCharacterStream(int columnIndex, Reader x) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateAsciiStream(String columnLabel, InputStream x) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateBinaryStream(String columnLabel, InputStream x) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateCharacterStream(String columnLabel, Reader reader) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateBlob(int columnIndex, InputStream inputStream) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateBlob(String columnLabel, InputStream inputStream) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateClob(int columnIndex, Reader reader) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateClob(String columnLabel, Reader reader) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateNClob(int columnIndex, Reader reader) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateNClob(String columnLabel, Reader reader) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}
}

/*
 * Location:
 * /Users/admin/.m2/repository/com/alibaba/external/jdbc.oracle/10.2.0.2
 * /jdbc.oracle-10.2.0.2.jar Qualified Name:
 * oracle.jdbc.driver.OracleReturnResultSet JD-Core Version: 0.6.0
 */